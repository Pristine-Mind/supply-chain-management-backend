# Generated by Django 4.2.23 on 2025-07-16 02:17

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("producer", "0034_directsale"),
        ("market", "0023_remove_marketplaceuserproduct_bid_end_date_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="MarketplaceSale",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("order_number", models.CharField(editable=False, max_length=50, unique=True, verbose_name="Order Number")),
                ("sale_date", models.DateTimeField(default=django.utils.timezone.now, verbose_name="Sale Date")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Last Updated")),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("USD", "US Dollar"),
                            ("EUR", "Euro"),
                            ("GBP", "British Pound"),
                            ("JPY", "Japanese Yen"),
                            ("AUD", "Australian Dollar"),
                            ("CAD", "Canadian Dollar"),
                            ("CHF", "Swiss Franc"),
                            ("CNY", "Chinese Yuan"),
                            ("INR", "Indian Rupee"),
                            ("NPR", "Nepalese Rupee"),
                        ],
                        default="USD",
                        max_length=3,
                        verbose_name="Currency",
                    ),
                ),
                (
                    "buyer_name",
                    models.CharField(
                        blank=True, help_text="Required for anonymous buyers", max_length=255, verbose_name="Buyer's Name"
                    ),
                ),
                (
                    "buyer_email",
                    models.EmailField(
                        blank=True, help_text="Required for order updates", max_length=254, verbose_name="Buyer's Email"
                    ),
                ),
                (
                    "buyer_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text="Required for delivery coordination",
                        max_length=128,
                        region=None,
                        verbose_name="Buyer's Phone",
                    ),
                ),
                ("is_deleted", models.BooleanField(default=False, verbose_name="Is Deleted")),
                ("deleted_at", models.DateTimeField(blank=True, null=True, verbose_name="Deleted At")),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)], verbose_name="Quantity"
                    ),
                ),
                (
                    "unit_price_at_purchase",
                    models.DecimalField(decimal_places=2, max_digits=12, verbose_name="Unit Price at Purchase"),
                ),
                ("unit_price", models.DecimalField(decimal_places=2, max_digits=10, verbose_name="Unit Price")),
                ("subtotal", models.DecimalField(decimal_places=2, max_digits=12, verbose_name="Subtotal")),
                ("tax_amount", models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name="Tax Amount")),
                (
                    "shipping_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name="Shipping Cost"),
                ),
                ("total_amount", models.DecimalField(decimal_places=2, max_digits=12, verbose_name="Total Amount")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("shipped", "Shipped"),
                            ("delivered", "Delivered"),
                            ("cancelled", "Cancelled"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Sale Status",
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("paid", "Paid"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                            ("partially_refunded", "Partially Refunded"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Payment Status",
                    ),
                ),
                ("payment_method", models.CharField(blank=True, max_length=50, null=True, verbose_name="Payment Method")),
                ("transaction_id", models.CharField(blank=True, max_length=100, null=True, verbose_name="Transaction ID")),
                ("notes", models.TextField(blank=True, null=True, verbose_name="Order Notes")),
                (
                    "buyer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Leave empty for anonymous buyers",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="marketplace_purchases",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Buyer",
                    ),
                ),
                (
                    "delivery",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sale",
                        to="market.delivery",
                        verbose_name="Delivery Details",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sales",
                        to="producer.marketplaceproduct",
                        verbose_name="Product",
                    ),
                ),
                (
                    "seller",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="marketplace_sales",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Seller",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="marketplacesale",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("buyer__isnull", False),
                    models.Q(("buyer_name__gt", ""), ("buyer_email__contains", "@"), ("buyer_phone__gt", "")),
                    _connector="OR",
                ),
                name="valid_buyer_info",
                violation_error_message="Either provide a registered buyer or complete buyer information.",
            ),
        ),
        migrations.AddConstraint(
            model_name="marketplacesale",
            constraint=models.CheckConstraint(
                check=models.Q(("quantity__gt", 0)),
                name="positive_quantity",
                violation_error_message="Quantity must be greater than zero.",
            ),
        ),
        migrations.AddConstraint(
            model_name="marketplacesale",
            constraint=models.CheckConstraint(
                check=models.Q(("unit_price_at_purchase__gte", 0), ("tax_amount__gte", 0), ("shipping_cost__gte", 0)),
                name="non_negative_prices",
                violation_error_message="Prices cannot be negative.",
            ),
        ),
    ]
