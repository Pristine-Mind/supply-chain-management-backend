# Fixed migration - use this to replace the problematic one
# Generated by Django 4.2.24 on 2025-10-19 01:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('producer', '0041_alter_product_category'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('market', '0029_alter_marketplaceuserproduct_category'),
    ]

    operations = [
        # Create new models first
        migrations.CreateModel(
            name='DeliveryInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_name', models.CharField(max_length=255, verbose_name='Customer Name')),
                ('phone_number', models.CharField(max_length=20, verbose_name='Phone Number')),
                ('address', models.TextField(verbose_name='Address')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('state', models.CharField(max_length=100, verbose_name='State')),
                ('zip_code', models.CharField(max_length=20, verbose_name='ZIP Code')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('delivery_instructions', models.TextField(blank=True, null=True, verbose_name='Delivery Instructions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Delivery Information',
                'verbose_name_plural': 'Delivery Information',
            },
        ),
        migrations.CreateModel(
            name='MarketplaceOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(editable=False, max_length=50, unique=True, verbose_name='Order Number')),
                ('order_status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('processing', 'Processing'), ('shipped', 'Shipped'), ('in_transit', 'In Transit'), ('delivered', 'Delivered'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='pending', max_length=20, verbose_name='Order Status')),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded')], default='pending', max_length=20, verbose_name='Payment Status')),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Total Amount')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CHF', 'Swiss Franc'), ('CNY', 'Chinese Yuan'), ('INR', 'Indian Rupee'), ('NPR', 'Nepalese Rupee')], default='NPR', max_length=3, verbose_name='Currency')),
                ('payment_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Payment Method')),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Transaction ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('delivered_at', models.DateTimeField(blank=True, null=True, verbose_name='Delivered At')),
                ('estimated_delivery_date', models.DateTimeField(blank=True, null=True, verbose_name='Estimated Delivery Date')),
                ('tracking_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Tracking Number')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Order Notes')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='marketplace_orders', to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
                ('delivery', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='market.deliveryinfo', verbose_name='Delivery Information')),
            ],
            options={
                'verbose_name': 'Marketplace Order',
                'verbose_name_plural': 'Marketplace Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MarketplaceOrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Unit Price')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Total Price')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='market.marketplaceorder', verbose_name='Order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='producer.marketplaceproduct', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Marketplace Order Item',
                'verbose_name_plural': 'Marketplace Order Items',
            },
        ),
        
        # Remove old OrderTrackingEvent index and field
        migrations.RemoveIndex(
            model_name='ordertrackingevent',
            name='market_orde_order_i_5a3cab_idx',
        ),
        migrations.RemoveField(
            model_name='ordertrackingevent',
            name='order',
        ),
        
        # Add new fields to OrderTrackingEvent
        migrations.AddField(
            model_name='ordertrackingevent',
            name='marketplace_sale',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tracking_events', to='market.marketplacesale', verbose_name='Marketplace Sale'),
        ),
        migrations.AddField(
            model_name='ordertrackingevent',
            name='marketplace_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tracking_events', to='market.marketplaceorder', verbose_name='Marketplace Order'),
        ),
        
        # Alter field
        migrations.AlterField(
            model_name='ordertrackingevent',
            name='status',
            field=models.CharField(max_length=20, verbose_name='Status'),
        ),
        
        # Add indexes after fields are created
        migrations.AddIndex(
            model_name='deliveryinfo',
            index=models.Index(fields=['city', 'state'], name='market_deli_city_b79dfb_idx'),
        ),
        migrations.AddIndex(
            model_name='deliveryinfo',
            index=models.Index(fields=['latitude', 'longitude'], name='market_deli_latitud_db77bb_idx'),
        ),
        migrations.AddIndex(
            model_name='marketplaceorderitem',
            index=models.Index(fields=['order'], name='market_mark_order_i_725310_idx'),
        ),
        migrations.AddIndex(
            model_name='marketplaceorderitem',
            index=models.Index(fields=['product'], name='market_mark_product_c53e79_idx'),
        ),
        migrations.AddIndex(
            model_name='marketplaceorder',
            index=models.Index(fields=['order_number'], name='market_mark_order_n_210b3a_idx'),
        ),
        migrations.AddIndex(
            model_name='marketplaceorder',
            index=models.Index(fields=['customer'], name='market_mark_custome_367318_idx'),
        ),
        migrations.AddIndex(
            model_name='marketplaceorder',
            index=models.Index(fields=['order_status', 'payment_status'], name='market_mark_order_s_cd747a_idx'),
        ),
        migrations.AddIndex(
            model_name='marketplaceorder',
            index=models.Index(fields=['created_at'], name='market_mark_created_e8c1da_idx'),
        ),
        migrations.AddIndex(
            model_name='marketplaceorder',
            index=models.Index(fields=['is_deleted', 'deleted_at'], name='market_mark_is_dele_705383_idx'),
        ),
        migrations.AddIndex(
            model_name='ordertrackingevent',
            index=models.Index(fields=['marketplace_sale', 'created_at'], name='market_orde_marketp_c34175_idx'),
        ),
        migrations.AddIndex(
            model_name='ordertrackingevent',
            index=models.Index(fields=['marketplace_order', 'created_at'], name='market_orde_marketp_2f771b_idx'),
        ),
        
        # Add constraints last
        migrations.AddConstraint(
            model_name='marketplaceorderitem',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gt', 0)), name='positive_quantity_orderitem', violation_error_message='Quantity must be greater than zero.'),
        ),
        migrations.AddConstraint(
            model_name='marketplaceorderitem',
            constraint=models.CheckConstraint(check=models.Q(('unit_price__gte', 0), ('total_price__gte', 0)), name='non_negative_prices_orderitem', violation_error_message='Prices cannot be negative.'),
        ),
        migrations.AddConstraint(
            model_name='ordertrackingevent',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('marketplace_order__isnull', True), ('marketplace_sale__isnull', False)), models.Q(('marketplace_order__isnull', False), ('marketplace_sale__isnull', True)), _connector='OR'), name='tracking_event_single_order_reference', violation_error_message='Tracking event must reference either a marketplace sale or marketplace order, but not both.'),
        ),
    ]