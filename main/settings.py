"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 4.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

import environ
from celery.schedules import crontab

BASE_DIR = Path(__file__).resolve().parent.parent


env = environ.Env(
    DJANGO_DEBUG=(bool, False),
    DJANGO_SECRET_KEY=str,
    DJANGO_CORS_ORIGIN_REGEX_WHITELIST=(list, []),
    DJANGO_ADDITIONAL_ALLOWED_HOSTS=(list, []),
    # Database
    DB_NAME=str,
    DB_USER=str,
    DB_PASSWORD=str,
    DB_HOST=str,
    DB_PORT=(int, 5432),
    DJANGO_TIME_ZONE=(str, "UTC"),
    # Static, Media configs
    DJANGO_STATIC_URL=(str, "/static/"),
    DJANGO_MEDIA_URL=(str, "/media/"),
    # -- File System
    DJANGO_STATIC_ROOT=(str, os.path.join(BASE_DIR, "staticfiles")),
    DJANGO_MEDIA_ROOT=(str, os.path.join(BASE_DIR, "media")),
    # Redis
    CELERY_REDIS_URL=str,
    CACHE_REDIS_URL=str,
)

SECRET_KEY = env("DJANGO_SECRET_KEY")

DEBUG = env("DJANGO_DEBUG")
ALLOWED_HOSTS = [
    "localhost",
    "0.0.0.0",
    *env("DJANGO_ADDITIONAL_ALLOWED_HOSTS"),
]


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    # External apps
    "admin_auto_filters",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "django_filters",
    "django_celery_beat",
    "anymail",
    "ckeditor",
    # localapps
    "producer.apps.ProducerConfig",
    "market",
    "user",
    "report",
    "drf_spectacular",
    "transport",
    "payment",
    "notification.apps.NotificationConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "main.middleware.EnsureSessionKeyMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "main.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates"), os.path.join(BASE_DIR, "market/templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "main.wsgi.application"


DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "HOST": env("DB_HOST"),
        "PORT": "5432",
        "NAME": env("DB_NAME"),
        "USER": env("DB_USER"),
        "PASSWORD": env("DB_PASSWORD"),
        "OPTIONS": {"options": "-c search_path=public"},
    },
}


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


LANGUAGE_CODE = "en-us"

TIME_ZONE = env("DJANGO_TIME_ZONE")

USE_I18N = True

USE_TZ = True

STATIC_URL = env("DJANGO_STATIC_URL")
MEDIA_URL = env("DJANGO_MEDIA_URL")

# In development, we serve additional static files from the 'static' directory.
# In production, leave STATICFILES_DIRS empty to avoid including STATIC_ROOT.
if DEBUG:
    STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
else:
    STATICFILES_DIRS = []

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

STATIC_ROOT = env("DJANGO_STATIC_ROOT")
MEDIA_ROOT = env("DJANGO_MEDIA_ROOT")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_WHITELIST = ("http://localhost:3000", "http://localhost:5173")
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",
]
# CORS_URLS_REGEX = r"(^/media/.*$)|(^/graphql/$)"
# CORS_ALLOW_METHODS = (
#     "DELETE",
#     "GET",
#     "OPTIONS",
#     "PATCH",
#     "POST",
#     "PUT",
# )

# CORS_ALLOW_HEADERS = (
#     "accept",
#     "accept-encoding",
#     "authorization",
#     "content-type",
#     "dnt",
#     "origin",
#     "user-agent",
#     "x-csrftoken",
#     "x-requested-with",
#     "sentry-trace",
# )


REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

CELERY_REDIS_URL = env("CELERY_REDIS_URL")
CELERY_BROKER_URL = CELERY_REDIS_URL
CELERY_RESULT_BACKEND = CELERY_REDIS_URL
CELERY_TIMEZONE = TIME_ZONE
CELERY_ACKS_LATE = True
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

CELERY_BEAT_SCHEDULE = {
    "move_large_stock_to_stocklist": {
        "task": "producer.tasks.move_large_stock_to_stocklist",
        "schedule": crontab(minute=0, hour="*/3"),
    },
    # "update-bid-end-dates-every-hour": {
    #     "task": "producer.tasks.update_bid_end_dates",
    #     "schedule": crontab(minute=0, hour="*"),
    # },
    "recalc_inventory_parameters": {
        "task": "producer.tasks.recalc_inventory_parameters",
        "schedule": crontab(minute=0, hour="*"),
    },
    "update-recent-purchases-hourly": {
        "task": "market.tasks.update_recent_purchases",
        "schedule": crontab(minute=0, hour="*"),
    },
    # Notification tasks
    "send-scheduled-notifications": {
        "task": "notification.tasks.send_scheduled_notifications_task",
        "schedule": crontab(minute="*/5"),  # Every 5 minutes
    },
    "retry-failed-notifications": {
        "task": "notification.tasks.retry_failed_notifications_task",
        "schedule": crontab(minute=0, hour="*/2"),  # Every 2 hours
    },
    "cleanup-old-notifications": {
        "task": "notification.tasks.cleanup_old_notifications_task",
        "schedule": crontab(minute=0, hour=2),  # Daily at 2 AM
    },
    "update-device-token-status": {
        "task": "notification.tasks.update_device_token_status_task",
        "schedule": crontab(minute=0, hour=4),  # Daily at 4 AM
    },
    "generate-notification-analytics": {
        "task": "notification.tasks.generate_notification_analytics_task",
        "schedule": crontab(minute=0, hour=6),  # Daily at 6 AM
    },
    "process-notification-queue": {
        "task": "notification.tasks.process_notification_queue_task",
        "schedule": crontab(minute="*/2"),  # Every 2 minutes
    },
}

SITE_URL = "https://appmulyabazzar.com"

KHALTI_SECRET_KEY = "dc7b150742684eb69eeeec8f30b32f5c"
KHALTI_BASE_URL = "https://dev.khalti.com/api/v2/"
KHALTI_WEBSITE_URL = ""
KHALTI_RETURN_URL = "https://appmulyabazzar.com/payment/success/"

KHALTI_TEST_MOBILE_NUMBER = "9800000001"
KHALTI_TEST_PIN = "TEST:sT5q2KNH4IGrfCBWkV9L"

SMS_TOKEN = os.environ.get("SMS_TOKEN")
SMS_API_URL = os.environ.get("SMS_API_URL")
SMS_SENDER = os.environ.get("SMS_SENDER")

SPECTACULAR_SETTINGS = {
    "TITLE": "Mulya Bazzar API",
    "DESCRIPTION": "Mulya Bazzar API Documenation",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "ENUM_NAME_OVERRIDES": {},
    "ENUM_ADD_EXPLICIT_BLANK_NULL_CHOICE": False,
}

SPARROWSMS_API_KEY = os.environ.get("SPARROWSMS_API_KEY")
SPARROWSMS_SENDER_ID = os.environ.get("SPARROWSMS_SENDER_ID")
SPARROWSMS_ENDPOINT = os.environ.get("SPARROWSMS_ENDPOINT")

EMAIL_BACKEND = "anymail.backends.sendgrid.EmailBackend"
ANYMAIL = {
    "SENDGRID_API_KEY": os.environ.get("SENDGRID_API_KEY"),
    "SENDGRID_GENERATE_MESSAGE_ID": True,
    "SENDGRID_MERGE_DATA": {},
    "SENDGRID_MERGE_GLOBAL_DATA": {},
}

DEFAULT_FROM_EMAIL = "mulyabazzar@gmail.com"

CKEDITOR_CONFIGS = {
    "default": {
        "toolbar": "full",
    }
}

# Notification Settings
FCM_SERVICE_ACCOUNT_KEY_PATH = os.environ.get("FCM_SERVICE_ACCOUNT_KEY_PATH")
APNS_TEAM_ID = os.environ.get("APNS_TEAM_ID")
APNS_KEY_ID = os.environ.get("APNS_KEY_ID")
APNS_KEY_PATH = os.environ.get("APNS_KEY_PATH")
APNS_BUNDLE_ID = os.environ.get("APNS_BUNDLE_ID")
APNS_USE_SANDBOX = os.environ.get("APNS_USE_SANDBOX", "True").lower() == "true"
